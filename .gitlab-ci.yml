# test runs test and lint jobs
# prepare sets the environment variables that can be passed to the other jobs (eg. build, deploy)
# build builds wm-go docker image and push it to the registry. 
#      `latest` docker tag will be used for commits on master when the commit is not tagged
# deploy deploys the app to the openstack when there's new tag
stages:
  - test
  - prepare
  - build
  - deploy

.test_common:
  stage: test
  only:
    - master
    - merge_requests
  image: golang:1.13
  variables:
    GOPROXY: direct
  cache:
    paths:
    - vendor/
  before_script:
    # Gitlab reads following login information from ~/.netrc file
    - echo "machine gitlab.uncharted.software login ${GITLAB_LOGIN} password ${GITLAB_TOKEN}" > ~/.netrc
    - go get -u golang.org/x/lint/golint
    - go mod vendor

lint:
  extends: .test_common
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go list ./... | grep -v /vendor/ | xargs -L1 golint --set_exit_status

test:
  extends: .test_common
  script:
    - go test -race $(go list ./... | grep -v /vendor/) -v -coverprofile=coverage.out
    - go tool cover -func=coverage.out

# Jobs don't share it's local env variables. So Setup up variables you want to share and save it to a file. 
# The file can be passed to other jobs as an artifacts
environment:
  stage: prepare
  only:
    - master
    - tags
  image: alpine
  artifacts:
    paths:
      - ci.env
    expire_in: 1 week
  before_script:
  script:
    - echo "--- Preparing environment vars ---"
    - >
      case ${CI_COMMIT_REF_NAME} in

        "${CI_COMMIT_TAG}") export DOCKER_TAG="${CI_COMMIT_TAG}" ;;

        master) export DOCKER_TAG="latest" ;;

        *) echo "Unknown build ref $CI_COMMIT_REF_NAME"; exit 1 ;;

      esac
    - 'echo "DOCKER_TAG: ${DOCKER_TAG}"'

    # prepare should fail if the docker tag version is empty
    - if [ -z "${DOCKER_TAG}" ]; then exit 1; fi
    - echo "DOCKER_TAG=${DOCKER_TAG}" > ci.env
    
build:
  stage: build
  only:
    - master
    - tags
  dependencies:
    - environment
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker info
    # Set env vars passed from prepare stage
    - export $(grep -v '^#' ci.env | xargs)
  script:
    - export DOCKER_TAG="latest"
    - echo "--- Building wm-go docker image ---"
    - echo VERSION=${DOCKER_TAG}

    # Build and push the docker image
    - docker build --build-arg GITLAB_LOGIN=${GITLAB_LOGIN} --build-arg GITLAB_TOKEN=${GITLAB_TOKEN} -t docker.uncharted.software/worldmodeler/wm-go:${DOCKER_TAG} .
    - docker push docker.uncharted.software/worldmodeler/wm-go:${DOCKER_TAG}

openstack-deploy:
  stage: deploy
  only:
    - tags
  dependencies:
    - environment
  image: alpine
  before_script:
    # Set env vars passed from prepare stage
    - export $(grep -v '^#' ci.env | xargs)

    # More details on configuring ssh connection: https://docs.gitlab.com/ee/ci/ssh_keys/
    #
    # Install ssh-agent if not already installed, it is required by Docker.
    # (change apt-get to yum if you use an RPM-based image)
    - which ssh-agent || ( apk update && apk add openssh-client )

    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    # We're using tr to fix line endings which makes ed25519 keys work
    # without extra base64 encoding.
    # https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    # Write known hosts to the file 
    # (known host is stored in SSH_KNOWN_HOSTS variable and generated by `ssh-keyscan {openstack ip}`
    - echo "$SSH_KNOWN_HOSTS" > known_hosts
  script:
    - echo "--- Deploying wm-go to Openstack ---"
    - echo DEPLOY DOCKER TAG ${DOCKER_TAG}

    # Pull new docker image and restart the container
    - echo "Pulling new docker image"
    - ssh -o UserKnownHostsFile=known_hosts centos@${OPENSTACK_IP} "docker pull docker.uncharted.software/worldmodeler/wm-go:${DOCKER_TAG}"
    - echo "Remove running container"
    - ssh -o UserKnownHostsFile=known_hosts centos@${OPENSTACK_IP} "docker stop wm-go || true && docker rm wm-go || true"
    - echo "Run new image with ${DOCKER_TAG}"
    - ssh -o UserKnownHostsFile=known_hosts centos@${OPENSTACK_IP} "docker run --env-file wm.env -d --restart always -p 4200:4200 -it --name wm-go docker.uncharted.software/worldmodeler/wm-go:${DOCKER_TAG}"
    # Delete the image with previous version tag
    - echo "Clean up previous wm-go images"
    - ssh -o UserKnownHostsFile=known_hosts centos@${OPENSTACK_IP} "docker rmi $(docker images docker.uncharted.software/worldmodeler/wm-go -f before=docker.uncharted.software/worldmodeler/wm-go:${DOCKER_TAG} -q) || true"
    - echo "wm-go ${DOCKER_TAG} is successfully deployed!"
  environment:
    name: openstack
    url: http://$OPENSTACK_IP:4200
